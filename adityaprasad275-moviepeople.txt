Directory structure:
└── adityaprasad275-moviepeople/
    ├── README.md
    ├── manage.py
    ├── plan.md
    ├── moviepeople/
    │   ├── __init__.py
    │   ├── asgi.py
    │   ├── settings.py
    │   ├── urls.py
    │   ├── views.py
    │   ├── wsgi.py
    │   └── __pycache__/
    ├── portfolio/
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── apps.py
    │   ├── forms.py
    │   ├── models.py
    │   ├── tests.py
    │   ├── urls.py
    │   ├── views.py
    │   ├── __pycache__/
    │   └── migrations/
    │       ├── 0001_initial.py
    │       ├── __init__.py
    │       └── __pycache__/
    ├── templates/
    │   ├── base.html
    │   ├── home.html
    │   ├── portfolio/
    │   │   ├── portfolio_confirm_delete.html
    │   │   ├── portfolio_form.html
    │   │   └── portfolio_list.html
    │   └── users/
    │       ├── edit_profile.html
    │       ├── login.html
    │       ├── profile.html
    │       └── signup.html
    └── users/
        ├── __init__.py
        ├── admin.py
        ├── apps.py
        ├── forms.py
        ├── models.py
        ├── tests.py
        ├── urls.py
        ├── views.py
        ├── __pycache__/
        └── migrations/
            ├── 0001_initial.py
            ├── __init__.py
            └── __pycache__/

================================================
File: README.md
================================================
the whole plan is in plan.md

## STEP 1
- set up django and postgresql. made a 'moviepeople_db' named database in postgres. updated settings.py with database configuration to use postgresql. ran `python manage.py migrate` to set up the database. 
- the whole `migrate` command worked so ig its set up correctly.

## STEP 2
- used django's built-in auth system to let users sign up and log in. created a `users` app.
- added signup, login, and logout views using Django's `LoginView`, `LogoutView`, and a simple signup form.
- made basic templates for signup and login pages.


## STEP 3
- gave users a profile page with extra info and a portfolio.
- extended Django's User model with fields like `role` (text), `location` (text), and `bio` (text). Used a `Profile` model linked to `User`.
- created a view to show the profile and another to edit it (used Django forms).
- added templates for viewing and editing the profile.
- tested it by adding a profile for myself.

Error log:
- i forgot to do `python manage.py makemigrations` before `migrate` so the profile model was not created in the database. 
- the user with usernme adi and password aditya275 doesnt have a profile lmao. because it was registered before step 3
<details>
<summary> users with no profile fix</summary>
first open up shell 

```python
python manage.py shell
```
then run this code
```python
from django.contrib.auth.models import User
from users.models import Profile

# Get all users
users = User.objects.all()

# Create profiles for users who don't have one
for user in users:
    try:
        # Check if profile exists
        profile = user.profile
        print(f"Profile for {user.username} already exists")
    except Profile.DoesNotExist:
        # Create profile if it doesn't exist
        Profile.objects.create(user=user)
        print(f"Created profile for {user.username}")
```

</details>

## STEP 4
- let users add projects to their profile.
- created a `PortfolioItem` model in a new `portfolio` app.
- added views to create, edit, and delete portfolio items (used Django forms).
- showed portfolio items on the profile page template.



================================================
File: manage.py
================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'moviepeople.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



================================================
File: plan.md
================================================
### Minimum Viable Product (MVP) Plan for "LinkedIn for Movie People"

#### Overview
We’re building a starting prototype (MVP) for a platform like "LinkedIn for movie people." This platform will let film industry professionals showcase their work and connect with others in the industry. The MVP will focus on the most important features to test the idea with users, keeping it simple and doable for a junior software developer. We’ll use a boring, well-tested tech stack to make development straightforward and reliable. The UI won’t be fancy—it’s all about getting the core functionality working.

#### Vision
The goal is to create a platform where film professionals (like directors, actors, or editors) can:
- Show off their work (like a portfolio).
- Find and connect with others in the industry.
- Test if this idea is useful to users.

After the MVP is built, we can get feedback and add more features later.

---

### Tech Stack
We’ll use a simple, boring, and well-understood tech stack that’s easy to work with:
- **Backend**: Django (Pythaon)  
  - Why? Django is a framework that does a lot for you (like user logins and database stuff) and is easy to learn. Python is readable, which helps junior developers.
- **Database**: PostgreSQL  
  - Why? It’s a solid, free database that works great with Django and can handle growth later.
- **Frontend**: Django templates with Bootstrap  
  - Why? Django templates let us build pages on the server (no fancy frontend frameworks yet), and Bootstrap makes them look decent and work on phones without much effort.

This stack is "boring" because it’s been around forever, has tons of tutorials, and won’t surprise you with weird problems.

---

### Most Important Base Features
For the MVP, we’ll focus on these core features that solve the main problems:
1. **User Authentication**  
   - Problem: Users need to sign up and log in to use the platform.  
   - What: Let users create accounts, log in, and log out.
2. **User Profiles with Portfolio**  
   - Problem: Film pros need a place to show their work.  
   - What: Each user gets a profile with their info (like role and location) and a portfolio section for projects (title, description, and media like videos or images).
3. **Networking Tools**  
   - Problem: Users want to connect with others in the industry.  
   - What:  
     - **Connections**: Send and accept connection requests (like LinkedIn friends).  
     - **Messaging**: Send simple text messages to connections.  
     - **Feed**: See updates from connections (like new projects they add).
4. **Search Functionality**  
   - Problem: Users need to find people to connect with.  
   - What: Search for users by name, role (e.g., "director"), or location.

These features cover the basics: signing up, showing work, connecting, and finding people.

---

### Problems to Solve
- **Identity**: Users need a secure way to join and access their stuff (authentication).  
- **Showcase**: They need an easy way to share their projects (profiles/portfolio).  
- **Networking**: They need tools to build relationships (connections, messaging, feed).  
- **Discovery**: They need to find the right people (search).  
- **Simplicity**: Keep it basic so a junior developer can build it and users can test it.

---

### Detailed Development Plan
Here’s how to build it, broken into parts a junior developer can follow. Each step builds on the last one.

#### 1. Set Up the Project
- **What to Do**: Get the basics ready.  
- **How**:  
  - Install Python and Django (`pip install django`).  
  - Create a new Django project (`django-admin startproject moviepeople`).  
  - Install PostgreSQL and set it up (download it, create a database called `moviepeople_db`).  
  - Update `settings.py` in Django to use PostgreSQL (add database name, user, password).  
  - Run `python manage.py migrate` to set up the database.  
- **Goal**: A working Django project connected to a database.

#### 2. User Authentication
- **What to Do**: Let users sign up and log in.  
- **How**:  
  - Use Django’s built-in auth system (it’s already there!).  
  - Create a `users` app (`python manage.py startapp users`).  
  - Add signup, login, and logout views using Django’s `LoginView`, `LogoutView`, and a simple signup form.  
  - Make basic templates (HTML files) for signup and login pages.  
- **Goal**: Users can create accounts and log in.

#### 3. User Profiles
- **What to Do**: Give users a profile page with extra info and a portfolio.  
- **How**:  
  - In the `users` app, extend Django’s User model with fields like `role` (text), `location` (text), and `bio` (text). Use a `Profile` model linked to `User`.  
  - Create a view to show the profile and another to edit it (use Django forms).  
  - Add templates for viewing and editing the profile.  
  - Test it by adding a profile for yourself.  
- **Goal**: Users can fill out and see their profiles.

#### 4. Portfolio Functionality
- **What to Do**: Let users add projects to their profile.  
- **How**:  
  - Create a `PortfolioItem` model in a new `portfolio` app (`python manage.py startapp portfolio`).  
  - Fields: `user` (link to User), `title` (text), `description` (text), `media_url` (text for video links, like YouTube).  
  - Add views to create, edit, and delete portfolio items (use Django forms).  
  - Show portfolio items on the profile page template.  
  - For simplicity, let users paste video URLs (e.g., YouTube links) instead of uploading files.  
- **Goal**: Users can add projects with titles, descriptions, and video links.

#### 5. Networking Features
- **What to Do**: Build tools for connecting and talking.  
- **How**:  
  - **Connections**:  
    - Create a `Connection` model: `user_from` (User), `user_to` (User), `status` (text: "pending" or "accepted").  
    - Add views to send a connection request and accept/reject it.  
    - Show a list of connections on the profile page.  
  - **Messaging**:  
    - Create a `Message` model: `sender` (User), `recipient` (User), `content` (text), `timestamp` (date).  
    - Add views to send a message and see a list of messages with a connection.  
    - Make a simple messaging template.  
  - **Feed**:  
    - Create an `Activity` model: `user` (User), `action` (text, e.g., "added a project"), `timestamp` (date).  
    - Add a view to show activities from a user’s connections.  
    - Make a feed template.  
- **Goal**: Users can connect, message, and see updates from each other.

#### 6. Search Functionality
- **What to Do**: Let users find others.  
- **How**:  
  - Create a search form (fields: name, role, location).  
  - Add a view to filter users using Django’s ORM (e.g., `User.objects.filter(role__contains="director")`).  
  - Make a search results template to list matching users.  
- **Goal**: Users can search and find people.

#### 7. Basic UI
- **What to Do**: Make it usable, not pretty.  
- **How**:  
  - Add Bootstrap (download it or use a CDN link in your templates).  
  - Use Bootstrap classes to style forms, buttons, and lists (e.g., profile, search results).  
  - Keep it simple: focus on function, not design.  
- **Goal**: Pages look okay and work on phones.

#### 8. Testing
- **What to Do**: Make sure it works.  
- **How**:  
  - Write simple tests in Django (e.g., test login works, test adding a portfolio item).  
  - Manually test everything: sign up, add a project, connect with yourself, send a message, search.  
  - Fix bugs you find.  
- **Goal**: The app doesn’t crash and does what it’s supposed to.

#### 9. Deployment
- **What to Do**: Put it online so others can try it.  
- **How**:  
  - Use Heroku (it’s free for small projects and easy).  
  - Follow Heroku’s Django guide: push your code with Git, set up PostgreSQL, run migrations.  
  - Test the live site.  
- **Goal**: The app is online for users to test.

---

### Additional Tips for a Junior Developer
- **Use Git**: Save your work with Git (`git init`, `git add .`, `git commit -m "message"`) so you can undo mistakes.  
- **Keep it Simple**: Don’t overthink—stick to the plan.  
- **Google Everything**: Stuck? Search “Django how to [problem]” (e.g., “Django how to add user profile”).  
- **Test as You Go**: After each step, check if it works before moving on.  
- **Ask for Help**: If you’re lost, ask a friend or post on Stack Overflow.

---

### What’s Next?
After the MVP is live:
- Get feedback from users (e.g., film students or friends in the industry).  
- Fix bugs and add small improvements.  
- Later, think about extras like video uploads, better search, or a nicer UI.

This plan gives you a clear path to build a working prototype. Start with step 1, and take it one piece at a time—you’ve got this!


================================================
File: moviepeople/__init__.py
================================================



================================================
File: moviepeople/asgi.py
================================================
"""
ASGI config for moviepeople project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'moviepeople.settings')

application = get_asgi_application()



================================================
File: moviepeople/settings.py
================================================
"""
Django settings for moviepeople project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9ia#b-fzl_9sxu+cijww+02k*kf$yy8!%&&l+@$v#-rnacx(^o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "users",
    "portfolio",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'moviepeople.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'moviepeople.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "moviepeople_db",
        "USER": "postgres",
        "PASSWORD": "123",
        "HOST": "localhost",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



================================================
File: moviepeople/urls.py
================================================
"""
URL configuration for moviepeople project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from . import views

urlpatterns = [
    path("admin/", admin.site.urls),
    path("users/", include("users.urls")),
    path("", views.home, name="home"),
    path("portfolio/", include("portfolio.urls")),
]



================================================
File: moviepeople/views.py
================================================
from django.shortcuts import render


def home(request):
    return render(request, "home.html")



================================================
File: moviepeople/wsgi.py
================================================
"""
WSGI config for moviepeople project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'moviepeople.settings')

application = get_wsgi_application()




================================================
File: portfolio/__init__.py
================================================



================================================
File: portfolio/admin.py
================================================
from django.contrib import admin

# Register your models here.



================================================
File: portfolio/apps.py
================================================
from django.apps import AppConfig


class PortfolioConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'portfolio'



================================================
File: portfolio/forms.py
================================================
from django import forms
from .models import PortfolioItem


class PortfolioItemForm(forms.ModelForm):
    class Meta:
        model = PortfolioItem
        fields = ["title", "description", "media_url"]



================================================
File: portfolio/models.py
================================================
from django.db import models
from django.contrib.auth.models import User


# Under the hood, this creates a database table with columns for each field.
# The ForeignKey establishes a many-to-one relationship between portfolio items and users - each user can have multiple portfolio items, but each item belongs to only one user.

class PortfolioItem(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="portfolio_items"
    )
    title = models.CharField(max_length=200)
    description = models.TextField()
    media_url = models.URLField(help_text="Enter a YouTube or Vimeo URL")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title



================================================
File: portfolio/tests.py
================================================
from django.test import TestCase

# Create your tests here.



================================================
File: portfolio/urls.py
================================================
from django.urls import path
from . import views

app_name = "portfolio"

urlpatterns = [
    path("", views.portfolio_list, name="portfolio_list"),
    path("create/", views.create_portfolio_item, name="create_portfolio_item"),
    path("edit/<int:pk>/", views.edit_portfolio_item, name="edit_portfolio_item"),
    path("delete/<int:pk>/", views.delete_portfolio_item, name="delete_portfolio_item"),
]



================================================
File: portfolio/views.py
================================================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import PortfolioItem
from .forms import PortfolioItemForm


@login_required
def portfolio_list(request):
    items = PortfolioItem.objects.filter(user=request.user)
    return render(request, "portfolio/portfolio_list.html", {"items": items})


@login_required
def create_portfolio_item(request):
    if request.method == "POST":
        form = PortfolioItemForm(request.POST)
        if form.is_valid():
            item = form.save(commit=False)
            item.user = request.user
            item.save()
            return redirect("portfolio:portfolio_list")
    else:
        form = PortfolioItemForm()
    return render(request, "portfolio/portfolio_form.html", {"form": form})


@login_required
def edit_portfolio_item(request, pk):
    item = get_object_or_404(PortfolioItem, pk=pk, user=request.user)
    if request.method == "POST":
        form = PortfolioItemForm(request.POST, instance=item)
        if form.is_valid():
            form.save()
            return redirect("portfolio:portfolio_list")
    else:
        form = PortfolioItemForm(instance=item)
    return render(request, "portfolio/portfolio_form.html", {"form": form})


@login_required
def delete_portfolio_item(request, pk):
    item = get_object_or_404(PortfolioItem, pk=pk, user=request.user)
    if request.method == "POST":
        item.delete()
        return redirect("portfolio:portfolio_list")
    return render(request, "portfolio/portfolio_confirm_delete.html", {"item": item})




================================================
File: portfolio/migrations/0001_initial.py
================================================
# Generated by Django 5.1.7 on 2025-03-27 19:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PortfolioItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('media_url', models.URLField(help_text='Enter a YouTube or Vimeo URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_items', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



================================================
File: portfolio/migrations/__init__.py
================================================




================================================
File: templates/base.html
================================================
<!DOCTYPE html>
<html>

  <head>
    <title>{% block title %}Movie People{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
  </head>

  <body>
    <header>
      <nav>
        <ul>
          {% if user.is_authenticated %}
          <li>Hello, {{ user.username }}</li>
          <li><a href="{% url 'users:profile' %}">View Profile</a></li>
          <li><a href="{% url 'users:edit_profile' %}">Edit Profile</a></li>
          <li><a href="{% url 'users:logout' %}">Logout</a></li>
          {% else %}
          <li><a href="{% url 'users:login' %}">Login</a></li>
          <li><a href="{% url 'users:signup' %}">Sign Up</a></li>
          {% endif %}
        </ul>
      </nav>
    </header>


    <main>
      {% if messages %}
      <div class="messages">
        {% for message in messages %}
        <div class="message {{ message.tags }}">{{ message }}</div>
        {% endfor %}
      </div>
      {% endif %}

      {% block content %}{% endblock %}
    </main>
  </body>

</html>


================================================
File: templates/home.html
================================================
{% extends 'base.html' %}

{% block title %}Home - Movie People{% endblock %}

{% block content %}
<h1>Welcome to Movie People</h1>
{% if user.is_authenticated %}
<p>You are logged in as {{ user.username }}.</p>
{% else %}
<p>Please <a href="{% url 'users:login' %}">log in</a> or <a href="{% url 'users:signup' %}">sign up</a> to continue.
</p>
{% endif %}
{% endblock %}


================================================
File: templates/portfolio/portfolio_confirm_delete.html
================================================
{% extends 'base.html' %}

{% block title %}Delete Portfolio Item{% endblock %}

{% block content %}
<h1>Delete Portfolio Item</h1>

<p>Are you sure you want to delete "{{ item.title }}"?</p>

<form method="post">
  {% csrf_token %}
  <button type="submit">Yes, Delete</button>
  <a href="{% url 'portfolio:portfolio_list' %}">Cancel</a>
</form>
{% endblock %}


================================================
File: templates/portfolio/portfolio_form.html
================================================
{% extends 'base.html' %}

{% block title %}
{% if form.instance.pk %}Edit{% else %}Add{% endif %} Portfolio Item
{% endblock %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Portfolio Item</h1>

<form method="post">
  {% csrf_token %}

  <div>
    <label for="{{ form.title.id_for_label }}">Title:</label>
    {{ form.title }}
    {% if form.title.errors %}
    <div class="error">{{ form.title.errors }}</div>
    {% endif %}
  </div>

  <div>
    <label for="{{ form.description.id_for_label }}">Description:</label>
    {{ form.description }}
    {% if form.description.errors %}
    <div class="error">{{ form.description.errors }}</div>
    {% endif %}
  </div>

  <div>
    <label for="{{ form.media_url.id_for_label }}">Media URL:</label>
    {{ form.media_url }}
    <small>Enter a YouTube or Vimeo URL</small>
    {% if form.media_url.errors %}
    <div class="error">{{ form.media_url.errors }}</div>
    {% endif %}
  </div>

  <div>
    <button type="submit">Save</button>
    <a href="{% url 'portfolio:portfolio_list' %}">Cancel</a>
  </div>
</form>
{% endblock %}


================================================
File: templates/portfolio/portfolio_list.html
================================================
{% extends 'base.html' %}

{% block title %}My Portfolio{% endblock %}

{% block content %}
<h1>My Portfolio</h1>

<a href="{% url 'portfolio:create_portfolio_item' %}">Add New Project</a>

{% if items %}
<div class="portfolio-items">
  {% for item in items %}
  <div class="portfolio-item">
    <h2>{{ item.title }}</h2>
    <p>{{ item.description }}</p>

    {% if item.media_url %}
    <div class="media-link">
      <a href="{{ item.media_url }}" target="_blank">View Media</a>
    </div>
    {% endif %}

    <div class="item-actions">
      <a href="{% url 'portfolio:edit_portfolio_item' item.pk %}">Edit</a>
      <a href="{% url 'portfolio:delete_portfolio_item' item.pk %}">Delete</a>
    </div>
  </div>
  {% endfor %}
</div>
{% else %}
<p>You haven't added any portfolio items yet.</p>
{% endif %}
{% endblock %}


================================================
File: templates/users/edit_profile.html
================================================
{% extends 'base.html' %}

{% block title %}Edit Profile{% endblock %}

{% block content %}
<h1>Edit Your Profile</h1>

<form method="post">
  {% csrf_token %}

  <div>
    <h2>Professional Details</h2>

    <div>
      <label for="{{ form.role.id_for_label }}">Role:</label>
      {{ form.role }}
      {% if form.role.errors %}
      <div>{{ form.role.errors }}</div>
      {% endif %}
    </div>

    <div>
      <label for="{{ form.location.id_for_label }}">Location:</label>
      {{ form.location }}
      {% if form.location.errors %}
      <div>{{ form.location.errors }}</div>
      {% endif %}
    </div>

    <div>
      <label for="{{ form.bio.id_for_label }}">Bio:</label>
      {{ form.bio }}
      {% if form.bio.errors %}
      <div>{{ form.bio.errors }}</div>
      {% endif %}
    </div>
  </div>

  <div>
    <button type="submit">Save Changes</button>
    <a href="{% url 'users:profile' %}">Cancel</a>
  </div>
</form>
{% endblock %}


================================================
File: templates/users/login.html
================================================
{% extends 'base.html' %}

{% block title %}Log In - Movie People{% endblock %}

{% block content %}
<h2>Log In</h2>
<form method="post">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Log In</button>
</form>
<p>Don't have an account? <a href="{% url 'users:signup' %}">Sign up</a></p>
{% endblock %}


================================================
File: templates/users/profile.html
================================================
{% extends 'base.html' %}

{% block title %}{{ user.username }}'s Profile{% endblock %}

{% block content %}
<h1>{{ user.username }}'s Profile</h1>

<div>
  <h2>Basic Information</h2>
  <p><strong>Username:</strong> {{ user.username }}</p>
  <p><strong>Email:</strong> {{ user.email }}</p>

  <h2>Professional Details</h2>
  <p><strong>Role:</strong> {{ user.profile.role|default:"Not specified" }}</p>
  <p><strong>Location:</strong> {{ user.profile.location|default:"Not specified" }}</p>

  <h2>Bio</h2>
  <p>{{ user.profile.bio|default:"No bio available" }}</p>
</div>

<div>
  <a href="{% url 'users:edit_profile' %}">Edit Profile</a>
</div>

<div>
  <h2>Portfolio</h2>
  {% if user.portfolio_items.all %}
  <div class="portfolio-items">
    {% for item in user.portfolio_items.all %}
    <div class="portfolio-item">
      <h3>{{ item.title }}</h3>
      <p>{{ item.description }}</p>
      {% if item.media_url %}
      <a href="{{ item.media_url }}" target="_blank">View Media</a>
      {% endif %}
    </div>
    {% endfor %}
  </div>
  {% else %}
  <p>No portfolio items yet.</p>
  {% endif %}

  {% if user == request.user %}
  <a href="{% url 'portfolio:portfolio_list' %}">Manage Portfolio</a>
  {% endif %}
</div>

{% endblock %}


================================================
File: templates/users/signup.html
================================================
{% extends 'base.html' %}

{% block title %}Sign Up - Movie People{% endblock %}

{% block content %}
<h2>Sign Up</h2>
<form method="post">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Sign Up</button>
</form>
<p>Already have an account? <a href="{% url 'users:login' %}">Log in</a></p>
{% endblock %}


================================================
File: users/__init__.py
================================================



================================================
File: users/admin.py
================================================
from django.contrib import admin

# Register your models here.



================================================
File: users/apps.py
================================================
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'



================================================
File: users/forms.py
================================================
from django import forms
from .models import Profile


class ProfileForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ["role", "location", "bio"]



================================================
File: users/models.py
================================================
from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver


class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    role = models.CharField(max_length=100, blank=True)
    location = models.CharField(max_length=100, blank=True)
    bio = models.TextField(max_length=500, blank=True)

    def __str__(self):
        return self.user.username


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()



================================================
File: users/tests.py
================================================
from django.test import TestCase

# Create your tests here.



================================================
File: users/urls.py
================================================
from django.urls import path
from . import views

app_name = "users"

urlpatterns = [
    path("signup/", views.signup, name="signup"),
    path("login/", views.login_view, name="login"),
    path("logout/", views.logout_view, name="logout"),
    path("profile/", views.profile_view, name="profile"),
    path("profile/edit/", views.edit_profile, name="edit_profile"),
]



================================================
File: users/views.py
================================================
from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib import messages
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .forms import ProfileForm


def signup(request):
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "Registration successful!")
            return redirect("users:login")
        else:
            messages.error(request, "Registration failed. Please correct the errors.")
    else:
        form = UserCreationForm()

    return render(request, "users/signup.html", {"form": form})


def login_view(request):
    if request.method == "POST":
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get("username")
            password = form.cleaned_data.get("password")
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                messages.success(request, f"Welcome back, {username}!")
                return redirect("home")  # You'll create this view later
            else:
                messages.error(request, "Invalid username or password.")
        else:
            messages.error(request, "Invalid username or password.")
    else:
        form = AuthenticationForm()

    return render(request, "users/login.html", {"form": form})


def logout_view(request):
    logout(request)
    messages.success(request, "You have been logged out successfully!")
    return redirect("users:login")


@login_required
def profile_view(request):
    return render(request, "users/profile.html")


@login_required
def edit_profile(request):
    if request.method == "POST":
        form = ProfileForm(request.POST, instance=request.user.profile)
        if form.is_valid():
            form.save()
            return redirect("users:profile")
    else:
        form = ProfileForm(instance=request.user.profile)
    return render(request, "users/edit_profile.html", {"form": form})




================================================
File: users/migrations/0001_initial.py
================================================
# Generated by Django 5.1.7 on 2025-03-27 18:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



================================================
File: users/migrations/__init__.py
================================================



